geo.data.matrix[i, ] <- c(tr$edge[i, ], from1, to1, from2, to2, tr$edge.length[i], distance)
}
return(geo.data.matrix)
}
get.geo.data.matrix(tr, sim_trait = sim_multi, tip_labels = tip_labels)
get.geo.data.matrix <- function(tr, sim_trait, tip_labels){
geo.data.matrix <- matrix(NA, nrow(tr$edge), 8)
colnames(geo.data.matrix) <- c('node_from', 'node_to', 'x1', 'x2', 'y1',
'y2', 'edge_length', 'distance')
for(i in 1:nrow(geo.data.matrix)){
if(tr$edge[i, 1] == length(tr$tip.label)+1){ # If 'from' is the root set to 0
from1 <- 0
from2 <- 0
}else{
from1 <- sim_trait[grep(paste0(tr$edge[i, 1], '_1'), names(sim_trait))]
from2 <- sim_trait[grep(paste0(tr$edge[i, 1], '_2'), names(sim_trait))]
}
if(tr$edge[i, 2] <= length(tr$tip.label)){
to1 <- sim_trait[grep(paste0(tip_labels[tr$edge[i, 2]], '_1'), names(sim_trait))]
to2 <- sim_trait[grep(paste0(tip_labels[tr$edge[i, 2]], '_2'), names(sim_trait))]
}else{
to1 <- sim_trait[grep(paste0(tr$edge[i, 2], '_1'), names(sim_trait))]
to2 <- sim_trait[grep(paste0(tr$edge[i, 2], '_2'), names(sim_trait))]
}
distance <- sqrt(((from1 - to1)^2) + ((from2 - to2)^2))
geo.data.matrix[i, ] <- c(tr$edge[i, 1], tr$edge[i,2], from1, to1, from2, to2, tr$edge.length[i], distance)
}
return(geo.data.matrix)
}
get.geo.data.matrix(tr, sim_trait = sim_multi, tip_labels = tip_labels)
tr$edge
tr$edge[,2] !%in% tr$edge[,1]
!(tr$edge[,2] %in% tr$edge[,1])
which(!(tr$edge[,2] %in% tr$edge[,1]))
tr$edge[which(!(tr$edge[,2] %in% tr$edge[,1]))]
nodelabels()
plot(tr)
nodelabels()
get.geo.data.matrix <- function(tr, sim_trait, tip_labels){
geo.data.matrix <- matrix(NA, nrow(tr$edge), length(sim_trait[1,]))
colnames(geo.data.matrix) <- c('node_from', 'node_to', 'x1', 'x2', 'y1',
'y2', 'edge_length', 'distance')
for(i in 1:nrow(geo.data.matrix)){
if(tr$edge[i, 1] == length(tr$tip.label)+1){ # If 'from' is the root set to 0
from1 <- 0
from2 <- 0
}else{
from1 <- sim_trait[grep(paste0(tr$edge[i, 1], '_1'), names(sim_trait))]
from2 <- sim_trait[grep(paste0(tr$edge[i, 1], '_2'), names(sim_trait))]
}
if(tr$edge[i, 2] <= length(tr$tip.label)){
to1 <- sim_trait[grep(paste0(tip_labels[tr$edge[i, 2]], '_1'), names(sim_trait))]
to2 <- sim_trait[grep(paste0(tip_labels[tr$edge[i, 2]], '_2'), names(sim_trait))]
}else{
to1 <- sim_trait[grep(paste0(tr$edge[i, 2], '_1'), names(sim_trait))]
to2 <- sim_trait[grep(paste0(tr$edge[i, 2], '_2'), names(sim_trait))]
}
distance <- sqrt(((from1 - to1)^2) + ((from2 - to2)^2))
geo.data.matrix[i, ] <- c(tr$edge[i, 1], tr$edge[i,2], from1, to1, from2, to2, tr$edge.length[i], distance)
}
return(geo.data.matrix)
}
get.geo.data.matrix(tr, sim_trait = sim_multi, tip_labels = tip_labels)
names(sim_multi)
sim_multi
colnames(sim_multi)
get.geo.data.matrix <- function(tr, sim_trait, tip_labels){
geo.data.matrix <- matrix(NA, nrow(tr$edge), length(sim_trait[1,]))
colnames(geo.data.matrix) <- c('node_from', 'node_to', 'x1', 'x2', 'y1',
'y2', 'edge_length', 'distance')
for(i in 1:nrow(geo.data.matrix)){
if(tr$edge[i, 1] == length(tr$tip.label)+1){ # If 'from' is the root set to 0
from1 <- 0
from2 <- 0
}else{
from1 <- sim_trait[grep(paste0(tr$edge[i, 1], '_1'), colnames(sim_trait))]
from2 <- sim_trait[grep(paste0(tr$edge[i, 1], '_2'), colnames(sim_trait))]
}
if(tr$edge[i, 2] <= length(tr$tip.label)){
to1 <- sim_trait[grep(paste0(tip_labels[tr$edge[i, 2]], '_1'), colnames(sim_trait))]
to2 <- sim_trait[grep(paste0(tip_labels[tr$edge[i, 2]], '_2'), colnames(sim_trait))]
}else{
to1 <- sim_trait[grep(paste0(tr$edge[i, 2], '_1'), colnames(sim_trait))]
to2 <- sim_trait[grep(paste0(tr$edge[i, 2], '_2'), colnames(sim_trait))]
}
distance <- sqrt(((from1 - to1)^2) + ((from2 - to2)^2))
geo.data.matrix[i, ] <- c(tr$edge[i, 1], tr$edge[i,2], from1, to1, from2, to2, tr$edge.length[i], distance)
}
return(geo.data.matrix)
}
get.geo.data.matrix(tr, sim_trait = sim_multi, tip_labels = tip_labels)
C
tr$tip.label
par(mfrow = c(1,1))
plot(tr)
edgelabels()
C
tr$tip.label
tip_labels
tip_labels <- gsub('_.+', '', tr$tip.label)
tip_labels
tip_labels
class(tip_labels)
class(tr$tip.label)
colnames(V)
head9sim_multi
colnames(sim_multi)
sim_multi
tr$edge
tr$edge.length
tr$edge
plot(tr)
plot(tr, tip_labels = F)
plot(tr, tip.labels = F)
plot(tr, show.tip.label = F, show.node.label = F)
plot(tr, show.tip.label = F, show.node.label = T)
plot(tr, show.tip.label = F, show.node.label = T)
plot(tr, show.tip.label = F)
nodelabels()
tiplabels()
tr$edge
tr$edge.length
length(tr$edge.length)
sim_multi[,"1_" %in% sim_multi]
sim_multi[,"2_" %in% sim_multi]
sim_multi[,length(tr$tip.label):(2*length(tr$tip.label))]
sim_multi[,(2*length(tr$tip.label-1)):(2*(2*length(tr$tip.label-1)))]
sim_multi[,(2*length(tr$tip.label-1)):(2*(2*length(tr$tip.label)-1))]
# Code to simulate BM processes on any tree
# Parameters:
# M characters, indexed x1,..,x
m <- numeric()
# N tips in the tree
N <- numeric()
# mu = vector of character initial values
mu <- vector()
# R  = VCV matrix of characters
R <- matrix()
# tr  = a tree on which to simulate the process
tr <- phylo()
# tr  = a tree on which to simulate the process
tr <- as.phylo()
# tr  = a tree on which to simulate the process
tr <- as.phylo()
# tr  = a tree on which to simulate the process
tr <- phylo()
# mu = vector of character initial values
means <- vector()
BM.Sim.On.Tree <- function(tr, means, R, m) {
}
# C  = a phylogenetic VCV
C <- matrix()
# N =  Number of simulations
N <-numeric()
BM.Sim.On.Tree <- function(means, R, C) {
# Names of character observations - e.g. xm_nodenum
names <- vector()
for (i in 1:length(means)){
mu <- c(mu, rep(means[i]), length(C[1,]))
names <- c(names, paste0('x', i, '_', 1:length(C[1,])))
}
V <- kronecker(R,C)
colnames(V) <- names
return(mvrnorm(n = N, mu = mu, Sigma = V))
}
tr
BM.Sim.On.Tree(c(0,0), R <- matrix(c(1, -0.9, -0.9, 2), 2), vcvPhylo(tr))
BM.Sim.On.Tree(8,c(0,0), R <- matrix(c(1, -0.9, -0.9, 2), 2), vcvPhylo(tr))
BM.Sim.On.Tree(8,c(0,0), matrix(c(1, -0.9, -0.9, 2), 2), vcvPhylo(tr))
vcvPhylo(tr)
BM.Sim.On.Tree(8,c(0,0), matrix(c(1, -0.9, -0.9, 2), 2), vcvPhylo(tr))
BM.Sim.On.Tree(8,c(0,0), matrix(c(1, -0.9, -0.9, 2), 2), C)
C
C <- vcvPhylo(tr)
BM.Sim.On.Tree(8,c(0,0), matrix(c(1, -0.9, -0.9, 2), 2), C)
BM.Sim.On.Tree(8,c(0,0), matrix(c(1, -0.9, -0.9, 2), 2), C = vcvPhylo(tr))
BM.Sim.On.Tree(N = 8,means = c(0,0), R = matrix(c(1, -0.9, -0.9, 2), 2), C = vcvPhylo(tr))
BM.Sim.On.Tree <- function(N, means, R, C) {
# Names of character observations - e.g. xm_nodenum
names <- vector()
for (i in 1:length(means)){
mu <- c(mu, rep(means[i]), length(C[1,]))
names <- c(names, paste0('x', i, '_', 1:length(C[1,])))
}
V <- kronecker(R,C)
colnames(V) <- names
return(mvrnorm(n = N, mu = mu, Sigma = V))
}
BM.Sim.On.Tree(N = 8,means = c(0,0), R = matrix(c(1, -0.9, -0.9, 2), 2), C = vcvPhylo(tr))
BM.Sim.On.Tree <- function(N, means, R, C) {
# Names of character observations - e.g. xm_nodenum
names <- vector()
for (i in 1:length(means)){
mu <- c(mu, rep(means[i]), length(C[1,]))
names <- c(names, paste0('x', i, '_', 1:length(C[1,])))
}
V <- kronecker(R,C)
colnames(V) <- names
return(mu)
#return(mvrnorm(n = N, mu = mu, Sigma = V))
}
BM.Sim.On.Tree(N = 8,means = c(0,0), R = matrix(c(1, -0.9, -0.9, 2), 2), C = vcvPhylo(tr))
BM.Sim.On.Tree <- function(N, means, R, C) {
# Names of character observations - e.g. xm_nodenum
names <- vector()
for (i in 1:length(means)){
mu <- c(mu, rep(means[i], length(C[1,])))
names <- c(names, paste0('x', i, '_', 1:length(C[1,])))
}
V <- kronecker(R,C)
colnames(V) <- names
return(mu)
#return(mvrnorm(n = N, mu = mu, Sigma = V))
}
BM.Sim.On.Tree(N = 8,means = c(0,0), R = matrix(c(1, -0.9, -0.9, 2), 2), C = vcvPhylo(tr))
BM.Sim.On.Tree <- function(N, means, R, C) {
# Names of character observations - e.g. xm_nodenum
names <- vector()
for (i in 1:length(means)){
mu <- c(mu, rep(means[i], length(C[1,])))
names <- c(names, paste0('x', i, '_', 1:length(C[1,])))
}
V <- kronecker(R,C)
colnames(V) <- names
return(V)
#return(mvrnorm(n = N, mu = mu, Sigma = V))
}
BM.Sim.On.Tree(N = 8,means = c(0,0), R = matrix(c(1, -0.9, -0.9, 2), 2), C = vcvPhylo(tr))
BM.Sim.On.Tree <- function(N, means, R, C) {
# Names of character observations - e.g. xm_nodenum
names <- vector()
for (i in 1:length(means)){
mu <- c(mu, rep(means[i], length(C[1,])))
names <- c(names, paste0('x', i, '_', 1:length(C[1,])))
}
V <- kronecker(R,C)
colnames(V) <- names
return(mvrnorm(n = N, mu = mu, Sigma = V))
}
BM.Sim.On.Tree(N = 8,means = c(0,0), R = matrix(c(1, -0.9, -0.9, 2), 2), C = vcvPhylo(tr))
# Function to extract Delta of characters between nodes of the tree
# BMsim is the matrix output of the BM process simulation from a tree
BMsim <- matrix()
# M = num characters
M <- numeric()
BM.Sim.On.Tree <- function(N, means, R, C) {
# Names of character observations - e.g. xm_nodenum
names <- vector()
for (i in 1:length(means)){
mu <- c(mu, rep(means[i], length(C[1,])))
names <- c(names, paste0('x', c(1:length(tr$tip.label), tr$tip.label+1:length(C[1,])), "_", i))
}
V <- kronecker(R,C)
colnames(V) <- names
return(mvrnorm(n = N, mu = mu, Sigma = V))
} # Checked and works
BM.Sim.On.Tree(N = 8,means = c(0,0), R = matrix(c(1, -0.9, -0.9, 2), 2), C = vcvPhylo(tr))
BM.Sim.On.Tree <- function(N, means, R, C) {
# Names of character observations - e.g. xm_nodenum
names <- vector()
for (i in 1:length(means)){
mu <- c(mu, rep(means[i], length(C[1,])))
names <- c(names, paste0('x', c(1:length(tr$tip.label), length(tr$tip.label)+1:length(C[1,])), "_", i))
}
V <- kronecker(R,C)
colnames(V) <- names
return(mvrnorm(n = N, mu = mu, Sigma = V))
} # Checked and works
BM.Sim.On.Tree(N = 8,means = c(0,0), R = matrix(c(1, -0.9, -0.9, 2), 2), C = vcvPhylo(tr))
paste0('x', c(1:length(tr$tip.label), length(tr$tip.label)+1:length(C[1,])), "_", i)
BM.Sim.On.Tree <- function(N, means, R, C) {
# Names of character observations - e.g. xm_nodenum
names <- vector()
for (i in 1:length(means)){
mu <- c(mu, rep(means[i], length(C[1,])))
names <- c(names, paste0('x', c(1:length(tr$tip.label), length(tr$tip.label)+2:length(C[1,])), "_", i))
}
V <- kronecker(R,C)
colnames(V) <- names
return(mvrnorm(n = N, mu = mu, Sigma = V))
} # Checked and works
BM.Sim.On.Tree(N = 8,means = c(0,0), R = matrix(c(1, -0.9, -0.9, 2), 2), C = vcvPhylo(tr))
paste0('x', c(1:length(tr$tip.label), length(tr$tip.label)+2:length(C[1,])), "_", i)
i
length(paste0('x', c(1:length(tr$tip.label), length(tr$tip.label)+2:length(C[1,])), "_", i))
plot(tr)
tiplabels()
nodelabels()
install.packages("castor")
library(castor)
simulate_bm_model(tr, sigma = matrix(c(1,0.9,0.9,1), 2))
class(simulate_bm_model(tr, sigma = matrix(c(1,0.9,0.9,1), 2)))
fit_bm_model(tr, tip_states = c(1,2,3,4,5))
fit_bm_model(tr, tip_states = c(1,2,3,4,5, -1,-2,-3,-4,-5))
fit_bm_model(tr, tip_states = matrix(c(1,2,3,4,5, -1,-2,-3,-4,-5), ncol = 2))
matrix(c(1,2,3,4,5, -1,-2,-3,-4,-5), ncol = 2)
fit_bm_model(tr, tip_states = matrix(c(1,2,3,4,5, -1,-2.3,-3,-4,-5), ncol = 2))
simulate_bm_model(tr, sigma = matrix(c(1,0.9,0.9,1), 2), Nsimulations = 4)
# The function below simulates BM's on a given tree
simulate_bm_model(tr, sigma = matrix(c(1,0.9,0.9,1), 2), Nsimulations = 1)
# The function below simulates BM's on a given tree
simulate_bm_model(tr, sigma = matrix(c(1,0.9,0.9,1), 2), Nsimulations = 2)
# The function below simulates BM's on a given tree
simulate_bm_model(tr, sigma = matrix(c(1,0.1,0.1,1), 2), Nsimulations = 2)
# The function below simulates BM's on a given tree
l <- simulate_bm_model(tr, sigma = matrix(c(1,0.1,0.1,1), 2), Nsimulations = 2)
l[[1]]
l
l$tip_states[[1]]
l$tip_states
l$tip_states[1,1,1]
l$tip_states[1,1,3]
l$tip_states[1,1,2]
tr <- sim.bdsky.stt(n = 6, lambdasky = 2, deathsky = 1, sampprobsky = 0.1,
timesky = 0)[[1]]
plot(tr)
# The function below simulates BM's on a given tree
l <- simulate_bm_model(tr, sigma = matrix(c(1,0.1,0.1,1), 2), Nsimulations = 2)
l
nodelabels()
# The function below simulates BM's on a given tree
l <- simulate_bm_model(tr, diffusivity = matrix(c(1,0.1,0.1,1), 2), Nsimulations = 2)
l
tr <- sim.bdsky.stt(n = 6, lambdasky = 2, deathsky = 1, sampprobsky = 0.1,
timesky = 0)[[1]]
# The function below simulates BM's on a given tree
l <- simulate_bm_model(tr, diffusivity = matrix(c(1,0.1,0.1,1), 2), Nsimulations = 2)
l
plot(tr)
nodelabels()
tiplabels()
tr <- sim.bdsky.stt(n = 10, lambdasky = 2, deathsky = 1, sampprobsky = 0.1,
timesky = 0)[[1]]
# The function below simulates BM's on a given tree
l <- simulate_bm_model(tr, diffusivity = matrix(c(1,0.1,0.1,1), 2), Nsimulations = 2)
plot(tr)
tiplabels()
nodelabels()
l
matrix(c(1,0.1,0.1,1), 2)
# The function below simulates BM's on a given tree
l <- simulate_bm_model(tr, diffusivity = matrix(c(10,0.1,0.1,10), 2), Nsimulations = 2)
l
tr <- sim.bdsky.stt(n = 5, lambdasky = 2, deathsky = 1, sampprobsky = 0.1,
timesky = 0)[[1]]
mu <- matrix(c(rep(0,8),rep(0,8)), ncol = 1)
R <- matrix(c(1, -0.9, -0.9, 2), 2)
C <- vcvPhylo(tr, anc.nodes = T)
C
plot(tr)
V <- kronecker(R, C)
sim_traits <- mvrnorm(n = 8, mu = mu, Sigma = V)
sim_traits
# Break into m = 2 trait matrices
traits <- list()
sim_traits <- mvrnorm(n = 10, mu = mu, Sigma = V)
# Write as quasi-function to start
for (i in 1:2) {
traits[[i]] <- sim_traits[,((i-1)*8+1):(8*i)]
}
traits
sim_traits
# Adding in column for root node
Ntips <- length(tr$tip.label)
Nnodes <- 2*Ntips-2
for (i in 1:length(traits)){
traits[[i]] <- cbind(traits[[i]][,1:Ntips], rep(0, length(sim_traits[,1])), traits[[i]][,Ntips+1:Nnodes])
}
for (i in 1:length(traits)){
traits[[i]] <- cbind(traits[[i]][,1:Ntips], rep(0, length(sim_traits[,1])), traits[[i]][,(Ntips+1):Nnodes])
}
traits
tr
plot(tr)
nodelabels()
tiplabels()
tr$edge
delta_trait <- list()
for (l in 1:length(traits)){
for (i in 1:length(tr$edge[,2])){
for (j in 1:length(sim_traits[,1])){
delta_trait[[l]][j, tr$edge[i,2]] <- traits[[l]][tr$edge[i,2],j] - traits[[l]][tr$edge[i,1],j]
}
}
}
length(traits)
# Now getting change in characters between nodes
delta_trait <- list()
for (l in 1:length(traits)){
for (i in 1:length(tr$edge[,2])){
for (j in 1:length(sim_traits[,1])){
delta_trait[[l]][j, tr$edge[i,2]] <- traits[[l]][tr$edge[i,2],j] - traits[[l]][tr$edge[i,1],j]
}
}
}
delta_trait
for (l in 1:length(traits)){
for (i in 1:length(tr$edge[,2])){
for (j in 1:length(sim_traits[,1])){
delta_trait[[l]][j, tr$edge[i,2]] <- (traits[[l]][tr$edge[i,2],j] - traits[[l]][tr$edge[i,1],j])
}
}
}
l = 2
i = 1
j = 2
delta_trait[[l]][j, tr$edge[i,2]] <- (traits[[l]][tr$edge[i,2],j] - traits[[l]][tr$edge[i,1],j])
traits[[1]]
traits[[1]][1,1]
tr$edge[i,2]
tr$edge[i,2]
tr$edge
traits[[l]][tr$edge[i,2],j]
traits[[l]][tr$edge[i,1],j]
delta_trait[[l]][j, tr$edge[i,2]]
# Now getting change in characters between nodes
delta_trait <- list()
delta_trait[[l]][j, tr$edge[i,2]]
for (l in 1:length(traits)){
for (i in 1:length(tr$edge[,2])){
for (j in 1:length(sim_traits[,1])){
delta_trait[[1]][j, tr$edge[i,2]] <- (traits[[l]][tr$edge[i,2],j] - traits[[l]][tr$edge[i,1],j])
}
}
}
[j, tr$edge[i,2]]
for (l in 1:length(traits)){
for (i in 1:length(tr$edge[,2])){
for (j in 1:length(sim_traits[,1])){
delta_trait[[l]][j, (tr$edge[i,2])] <- (traits[[l]][tr$edge[i,2],j] - traits[[l]][tr$edge[i,1],j])
}
}
}
[j, (tr$edge[i,2])]
traits[[1]][j, (tr$edge[i,2])]
temp <- as.matrix()
temp <- matrix()
for (l in 1:length(traits)){
temp <- matrix()
for (i in 1:length(tr$edge[,2])){
for (j in 1:length(sim_traits[,1])){
temp[j, (tr$edge[i,2])] <- (traits[[l]][tr$edge[i,2],j] - traits[[l]][tr$edge[i,1],j])
}
}
delta_trait[[l]] <- temp
}
tr$edge[i,2]
tr$edge[i,1]
tr$edge
dim(traits[[1]])
for (l in 1:length(traits)){
temp <- matrix()
for (i in 1:length(tr$edge[,2])){
for (j in 1:length(sim_traits[,1])){
delta_trait[[l]][j, (tr$edge[i,2])] <- (traits[[l]][j, tr$edge[i,2]] - traits[[l]][j, tr$edge[i,1]])
}
}
}
(traits[[l]][j, tr$edge[i,2]] - traits[[l]][j, tr$edge[i,1]])
length(tr$edge[,1])
1:length(tr$edge[,2])
1:length(sim_traits[,1])
length(traits[,1])
length(traits[[1]][,1])
for (l in 1:length(traits)){
for (i in 1:length(tr$edge[,2])){
for (j in 1:length(traits[[1]][,1])){
delta_trait[[l]][j, (tr$edge[i,2])] <- (traits[[l]][j, tr$edge[i,2]] - traits[[l]][j, tr$edge[i,1]])
}
}
}
length(traits)
for (l in 1:2){
for (i in 1:length(tr$edge[,2])){
for (j in 1:length(traits[[1]][,1])){
delta_trait[[l]][j, (tr$edge[i,2])] <- (traits[[l]][j, tr$edge[i,2]] - traits[[l]][j, tr$edge[i,1]])
}
}
}
for (l in 1:2){
for (i in 1:length(tr$edge[,2])){
for (j in 1:length(traits[[1]][,1])){
delta_trait[[l]][j, (tr$edge[i,2])] <- (traits[[l]][j, tr$edge[i,2]] - traits[[l]][j, tr$edge[i,1]])
}
}
}
library(ape,NELSI)
library(TreeSim)
library(phylotools)
library(phytools)
library(MASS)
library(phangorn)
setwd("~/Documents/GitHub/continuous_traits/test_sequences/2traits_100tips/")
#tr <- sim.bdsky.stt(n = 100, lambdasky = 2, deathsky = 1, sampprobsky = 0.1, timesky = 0)[[1]]
#write.tree(tr, file = "ReferenceTree_100tips_labmda2_death1_samprob0.1.nwk")
tr <- read.tree("ReferenceTree_100tips_labmda2_death1_samprob0.1.nwk")
tiplabs <- tr$tip.label
# Generating MVN Simulations
# 100 tips => 2N-2  - 198 (exclude root)
# But, we assume the root node is fixed at zero so it is not an RV => 198 measurements for each trait
mu <- matrix(c(rep(0,198),rep(0,198)), ncol = 1)
R <- matrix(c(1, 0, 0, 1), 2)
C <- vcvPhylo(tr, anc.nodes = T)
V <- kronecker(R, C)
Ntraits <- 2
Ntips <- length(tr$tip.label)
Nnodes <- 198
delta_trait <- list()
delta_time <- matrix(NA)
traits <- list()
sim_traits <- mvrnorm(n = 5, mu = mu, Sigma = V)
sim_traits
